nya::suggested-input $name $value $size $type $placeholder $id $reset $suggest $itemTemplate $class $disabled $noAPI
    &|(typeof theme === 'undefined' ? '"suggested-input.light.css"' : '"suggested-input.' + theme + '.css"')|
    &"suggested-input.js"
    nya::input name=$name value=$value size=$size type=$type placeholder=$placeholder id=$id reset=$reset class="nya-suggested-input" disabled=$disabled autocomplete="off" noAPI=$noAPI AS $input
    nya::suggested-input__suggest
    JS
        if ($suggest) {
            if (!Nya._suggestReady) {
                Nya._suggestReady = true;
                window.addEventListener('resize', setSuggestPosition);
                window.addEventListener('mousemove', setSuggestPosition);
            }

            var value,
                timer,
                req,
                curData,
                curItem,
                curValue,
                suggestData,
                suggestNode;

            $input.on('focus blur keydown input click', function(e) {
                var code = e.which;
                switch(true) {
                    case e.type === 'blur' || code === 27:
                        renderSuggest();
                        break;
                    case e.type === 'focus' || e.type === 'input' || (e.type === 'click' && !req && !timer && !curData):
                        renderSuggest(null, $input.val());
                        break;
                    case e.type === 'keydown':
                        if ((code === 38 || code === 40 || code === 13) && curData && curData.length) {
                            if (code === 13) {
                                if (curItem !== undefined) {
                                    e.preventDefault();
                                    $input.val(curValue);
                                    renderSuggest();
                                }
                            } else {
                                e.preventDefault();
                                if (curItem === undefined) {
                                    curItem = code === 38 ? curData.length - 1 : 0;
                                } else {
                                    curItem += code === 38 ? -1 : 1;
                                    if (curItem < 0) { curItem = curData.length - 1; }
                                    if (curItem >= curData.length) { curItem = 0; }
                                }
                                renderSuggest(curData, value);
                            }
                        }
                        break;
                }
            });
        }

        function renderSuggest(data, val) {
            if (timer) { clearTimeout(timer); timer = null; }
            if (req && (typeof req.reject === 'function')) { req.reject(); }
            req = null;
            
            if (!data || !data.length || !val) {
                removeSuggest();
                curData = null;
            }
            
            if (!data && val) { // Request the data.
                curItem = undefined;
                curValue = '';
                timer = setTimeout(function() {
                    timer = null;
                    value = val;
                    req = $suggest(val);
                    if (req) {
                        if (typeof req.then === 'function') {
                            req.then(function(d) {
                                req = null;
                                if (val === value) { renderSuggest(d, val); }
                            });
                        } else {
                            renderSuggest(req, val);
                        }
                    }
                }, 200);
            } else if (data && data.length) { // Actually render.
                curData = data;
                removeSuggest();
                suggestData = $C._tpl['nya::suggested-input__suggest'].call(document.body, val, data, curItem, $itemTemplate);
                suggestNode = suggestData.node;
                curValue = suggestData.value;
                $B(suggestNode).on('mousedown', function(e) {
                    e.preventDefault();
                    var index = e.target._nyaIndex;
                    if (curData && typeof index === 'number') {
                        $input.val(e.target._nyaValue);
                        renderSuggest();
                    }
                });
                Nya._curSuggest = [$input._n, suggestNode];
                setSuggestPosition();
            }
        }

        function removeSuggest() {
            if (suggestNode && suggestNode.parentNode) {
                suggestNode.parentNode.removeChild(suggestNode);
                suggestNode = null;
            }
            Nya._curSuggest = null;
        }

        function setSuggestPosition() {
            var suggest = Nya._curSuggest;
            if (suggest) {
                var pos = suggest[0].getBoundingClientRect();
                suggest = suggest[1].style;
                suggest.left = Math.round(pos.left) + window.pageXOffset + 'px';
                suggest.top = Math.round(pos.bottom) + window.pageYOffset + 'px';
            }
        }
    EXPOSE $input


nya::suggested-input__suggest $value $data $cur $itemTemplate
    TEST ($data && $data.length)
        SET $currentVal ""
        nya::island fly=(true) border=(true) class="nya-suggested-input__suggest" AS $suggestNode
            EACH $index $item $data
                SET $isCurrent (false)
                div:if(($isCurrent = ($cur === ((this._nyaIndex = $index)))), .current)
                    CHOOSE
                        WHEN $itemTemplate
                            CALL $itemTemplate $item $isCurrent AS $inputVal
                        OTHERWISE
                            $item
                            SET $inputVal $item
                    JS
                        this._nyaValue = $inputVal;
                        if ($isCurrent) { $currentVal = $inputVal; }
    EXPOSE ({node: $suggestNode, value: $currentVal})
